<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdGen</name>
    </assembly>
    <members>
        <member name="T:IdGen.DefaultTimeSource">
            <summary>
            Provides time data to an <see cref="T:IdGen.IdGenerator"/>.
            </summary>
            <remarks>
            Unless specified the default duration of a tick for a <see cref="T:IdGen.DefaultTimeSource"/> is 1 millisecond.
            </remarks>
            <remarks>
            Initializes a new <see cref="T:IdGen.DefaultTimeSource"/> object.
            </remarks>
            <param name="epoch">The epoch to use as an offset from now,</param>
            <param name="tickDuration">The duration of a tick for this timesource.</param>
        </member>
        <member name="M:IdGen.DefaultTimeSource.#ctor(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Provides time data to an <see cref="T:IdGen.IdGenerator"/>.
            </summary>
            <remarks>
            Unless specified the default duration of a tick for a <see cref="T:IdGen.DefaultTimeSource"/> is 1 millisecond.
            </remarks>
            <remarks>
            Initializes a new <see cref="T:IdGen.DefaultTimeSource"/> object.
            </remarks>
            <param name="epoch">The epoch to use as an offset from now,</param>
            <param name="tickDuration">The duration of a tick for this timesource.</param>
        </member>
        <member name="M:IdGen.DefaultTimeSource.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new <see cref="T:IdGen.DefaultTimeSource"/> object.
            </summary>
            <param name="epoch">The epoch to use as an offset from now.</param>
            <remarks>The default tickduration is 1 millisecond.</remarks>
        </member>
        <member name="M:IdGen.DefaultTimeSource.GetTicks">
            <summary>
            Returns the current number of ticks for the <see cref="T:IdGen.DefaultTimeSource"/>.
            </summary>
            <returns>The current number of ticks to be used by an <see cref="T:IdGen.IdGenerator"/> when creating an Id.</returns>
            <remarks>
            Note that a 'tick' is a period defined by the timesource; this may be any valid <see cref="T:System.TimeSpan"/>; be
            it a millisecond, an hour, 2.5 seconds or any other value.
            </remarks>
        </member>
        <member name="T:IdGen.Id">
            <summary>
            Holds information about a decoded id.
            </summary>
        </member>
        <member name="P:IdGen.Id.SequenceNumber">
            <summary>
            Gets the sequence number of the id.
            </summary>
        </member>
        <member name="P:IdGen.Id.GeneratorId">
            <summary>
            Gets the generator id of the generator that generated the id.
            </summary>
        </member>
        <member name="P:IdGen.Id.DateTimeOffset">
            <summary>
            Gets the date/time when the id was generated.
            </summary>
        </member>
        <member name="M:IdGen.Id.#ctor(System.Int32,System.Int32,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:IdGen.Id"/> struct.
            </summary>
            <param name="sequenceNumber">The sequence number of the id.</param>
            <param name="generatorId">The generator id of the generator that generated the id.</param>
            <param name="dateTimeOffset">The date/time when the id was generated.</param>
            <returns>An <see cref="T:IdGen.Id"/>.</returns>
        </member>
        <member name="T:IdGen.IdGenerator">
            <summary>
            Generates Id's inspired by Twitter's (late) Snowflake project.
            </summary>
        </member>
        <member name="P:IdGen.IdGenerator.Options">
            <summary>
            Gets the <see cref="T:IdGen.IdGeneratorOptions"/>.
            </summary>
        </member>
        <member name="P:IdGen.IdGenerator.Id">
            <summary>
            Gets the Id of the generator.
            </summary>
        </member>
        <member name="M:IdGen.IdGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IdGen.IdGenerator"/> class.
            </summary>
            <param name="generatorId">The Id of the generator.</param>
        </member>
        <member name="M:IdGen.IdGenerator.#ctor(System.Int32,IdGen.IdGeneratorOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:IdGen.IdGenerator"/> class with the specified <see cref="T:IdGen.IdGeneratorOptions"/>.
            </summary>
            <param name="generatorId">The Id of the generator.</param>
            <param name="options">The <see cref="T:IdGen.IdGeneratorOptions"/> for the <see cref="T:IdGen.IdGenerator"/>.</param>.
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:IdGen.IdGenerator.CreateId">
            <summary>
            Creates a new Id.
            </summary>
            <returns>Returns an Id based on the <see cref="T:IdGen.IdGenerator"/>'s epoch, generatorid and sequence.</returns>
            <exception cref="T:IdGen.InvalidSystemClockException">Thrown when clock going backwards is detected.</exception>
            <exception cref="T:IdGen.SequenceOverflowException">Thrown when sequence overflows.</exception>
            <remarks>Note that this method MAY throw an one of the documented exceptions.</remarks>
        </member>
        <member name="M:IdGen.IdGenerator.TryCreateId(System.Int64@)">
            <summary>
            Attempts to a new Id. A return value indicates whether the operation succeeded.
            </summary>
            <param name="id">
            When this method returns, contains the generated Id if the method succeeded. If the method failed, as
            indicated by the return value, no guarantees can be made about the id. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.
            </param>
            <returns>true if an Id was generated successfully; false otherwise.</returns>
            <remarks>This method will not throw exceptions but rather indicate success by the return value.</remarks>
        </member>
        <member name="M:IdGen.IdGenerator.CreateIdImpl(System.Exception@)">
            <summary>
            Creates a new Id.
            </summary>
            <param name="exception">If any exceptions occur they will be returned in this argument.</param>
            <returns>
            Returns an Id based on the <see cref="T:IdGen.IdGenerator"/>'s epoch, generatorid and sequence or
            a negative value when an exception occurred.
            </returns>
            <exception cref="T:IdGen.InvalidSystemClockException">Thrown when clock going backwards is detected.</exception>
            <exception cref="T:IdGen.SequenceOverflowException">Thrown when sequence overflows.</exception>
        </member>
        <member name="M:IdGen.IdGenerator.FromId(System.Int64)">
            <summary>
            Returns information about an Id such as the sequence number, generator id and date/time the Id was generated
            based on the current <see cref="T:IdGen.IdStructure"/> of the generator.
            </summary>
            <param name="id">The Id to extract information from.</param>
            <returns>Returns an <see cref="T:IdGen.Id" /> that contains information about the 'decoded' Id.</returns>
            <remarks>
            IMPORTANT: note that this method relies on the <see cref="T:IdGen.IdStructure"/> and timesource; if the id was
            generated with a diffferent IdStructure and/or timesource than the current one the 'decoded' ID will NOT
            contain correct information.
            </remarks>
        </member>
        <member name="M:IdGen.IdGenerator.GetTicks">
            <summary>
            Gets the number of ticks since the <see cref="T:IdGen.ITimeSource"/>'s epoch.
            </summary>
            <returns>Returns the number of ticks since the <see cref="T:IdGen.ITimeSource"/>'s epoch.</returns>
        </member>
        <member name="M:IdGen.IdGenerator.GetMask(System.Byte)">
            <summary>
            Returns a bitmask masking out the desired number of bits; a bitmask of 2 returns 000...000011, a bitmask of
            5 returns 000...011111.
            </summary>
            <param name="bits">The number of bits to mask.</param>
            <returns>Returns the desired bitmask.</returns>
        </member>
        <member name="M:IdGen.IdGenerator.IdStream">
            <summary>
            Returns a 'never ending' stream of Id's.
            </summary>
            <returns>A 'never ending' stream of Id's.</returns>
        </member>
        <member name="M:IdGen.IdGenerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over Id's.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate over Id's.</returns>
        </member>
        <member name="M:IdGen.IdGenerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates over Id's.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate over Id's.</returns>
        </member>
        <member name="T:IdGen.IdGeneratorOptions">
            <summary>
            Represents the options an <see cref="T:IdGen.IdGenerator"/> can be configured with.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:IdGen.IdGeneratorOptions"/> class.
            </remarks>
            <param name="idStructure">The <see cref="P:IdGen.IdGeneratorOptions.IdStructure"/> for ID's to be generated.</param>
            <param name="timeSource">The <see cref="T:IdGen.ITimeSource"/> to use when generating ID's.</param>
            <param name="sequenceOverflowStrategy">The <see cref="P:IdGen.IdGeneratorOptions.SequenceOverflowStrategy"/> to use when generating ID's.</param>
        </member>
        <member name="M:IdGen.IdGeneratorOptions.#ctor(IdGen.IdStructure,IdGen.ITimeSource,IdGen.SequenceOverflowStrategy)">
            <summary>
            Represents the options an <see cref="T:IdGen.IdGenerator"/> can be configured with.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:IdGen.IdGeneratorOptions"/> class.
            </remarks>
            <param name="idStructure">The <see cref="P:IdGen.IdGeneratorOptions.IdStructure"/> for ID's to be generated.</param>
            <param name="timeSource">The <see cref="T:IdGen.ITimeSource"/> to use when generating ID's.</param>
            <param name="sequenceOverflowStrategy">The <see cref="P:IdGen.IdGeneratorOptions.SequenceOverflowStrategy"/> to use when generating ID's.</param>
        </member>
        <member name="F:IdGen.IdGeneratorOptions.DefaultEpoch">
            <summary>
            Returns the default epoch.
            </summary>
        </member>
        <member name="F:IdGen.IdGeneratorOptions.Default">
            <summary>
            Returns a default instance of <see cref="T:IdGen.IdGeneratorOptions"/>.
            </summary>
        </member>
        <member name="P:IdGen.IdGeneratorOptions.IdStructure">
            <summary>
            Gets the <see cref="P:IdGen.IdGeneratorOptions.IdStructure"/> of the generated ID's
            </summary>
        </member>
        <member name="P:IdGen.IdGeneratorOptions.TimeSource">
            <summary>
            Gets the <see cref="T:IdGen.ITimeSource"/> to use when generating ID's.
            </summary>
        </member>
        <member name="P:IdGen.IdGeneratorOptions.SequenceOverflowStrategy">
            <summary>
            Gets the <see cref="P:IdGen.IdGeneratorOptions.SequenceOverflowStrategy"/> to use when generating ID's.
            </summary>
        </member>
        <member name="T:IdGen.IdStructure">
            <summary>
            Specifies the number of bits to use for the different parts of an Id for an <see cref="T:IdGen.IdGenerator"/>.
            </summary>
        </member>
        <member name="P:IdGen.IdStructure.TimestampBits">
            <summary>
            Gets number of bits to use for the timestamp part of the Id's to generate.
            </summary>
        </member>
        <member name="P:IdGen.IdStructure.GeneratorIdBits">
            <summary>
            Gets number of bits to use for the generator-id part of the Id's to generate.
            </summary>
        </member>
        <member name="P:IdGen.IdStructure.SequenceBits">
            <summary>
            Gets number of bits to use for the sequence part of the Id's to generate.
            </summary>
        </member>
        <member name="P:IdGen.IdStructure.MaxIntervals">
            <summary>
            Returns the maximum number of intervals for this <see cref="T:IdGen.IdStructure"/> configuration.
            </summary>
        </member>
        <member name="P:IdGen.IdStructure.MaxGenerators">
            <summary>
            Returns the maximum number of generators available for this <see cref="T:IdGen.IdStructure"/> configuration.
            </summary>
        </member>
        <member name="P:IdGen.IdStructure.MaxSequenceIds">
            <summary>
            Returns the maximum number of sequential Id's for a time-interval (e.g. max. number of Id's generated 
            within a single interval).
            </summary>
        </member>
        <member name="P:IdGen.IdStructure.Default">
            <summary>
            Gets a default <see cref="T:IdGen.IdStructure"/> with 41 bits for the timestamp part, 10 bits for the generator-id 
            part and 12 bits for the sequence part of the id.
            </summary>
        </member>
        <member name="M:IdGen.IdStructure.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes an <see cref="T:IdGen.IdStructure"/> for <see cref="T:IdGen.IdGenerator"/>s.
            </summary>
            <param name="timestampBits">Number of bits to use for the timestamp-part of Id's.</param>
            <param name="generatorIdBits">Number of bits to use for the generator-id of Id's.</param>
            <param name="sequenceBits">Number of bits to use for the sequence-part of Id's.</param>
        </member>
        <member name="M:IdGen.IdStructure.WraparoundDate(System.DateTimeOffset,IdGen.ITimeSource)">
            <summary>
            Calculates the last date for an Id before a 'wrap around' will occur in the timestamp-part of an Id for the
            given <see cref="T:IdGen.IdStructure"/>.
            </summary>
            <param name="epoch">The used epoch for the <see cref="T:IdGen.IdGenerator"/> to use as offset.</param>'
            <param name="timeSource">The used <see cref="T:IdGen.ITimeSource"/> for the <see cref="T:IdGen.IdGenerator"/>.</param>
            <returns>The last date for an Id before a 'wrap around' will occur in the timestamp-part of an Id.</returns>
            <remarks>
            Please note that for dates exceeding the <see cref="F:System.DateTimeOffset.MaxValue"/> an
            <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when any combination of a <see cref="P:IdGen.ITimeSource.TickDuration"/> and <see cref="P:IdGen.IdStructure.MaxIntervals"/> 
            results in a date exceeding the <see cref="F:System.TimeSpan.MaxValue"/> value.
            </exception>
        </member>
        <member name="M:IdGen.IdStructure.WraparoundInterval(IdGen.ITimeSource)">
            <summary>
            Calculates the interval at wich a 'wrap around' will occur in the timestamp-part of an Id for the given
            <see cref="T:IdGen.IdStructure"/>.
            </summary>
            <param name="timeSource">The used <see cref="T:IdGen.ITimeSource"/> for the <see cref="T:IdGen.IdGenerator"/>.</param>
            <returns>
            The interval at wich a 'wrap around' will occur in the timestamp-part of an Id for the given
            <see cref="T:IdGen.IdStructure"/>.
            </returns>
            <remarks>
            Please note that for intervals exceeding the <see cref="F:System.TimeSpan.MaxValue"/> an
            <see cref="T:System.OverflowException"/> will be thrown.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="timeSource"/> is null.
            </exception>
            <exception cref="T:System.OverflowException">
            Thrown when any combination of a <see cref="P:IdGen.ITimeSource.TickDuration"/> and <see cref="P:IdGen.IdStructure.MaxIntervals"/> 
            results in a TimeSpan exceeding the <see cref="F:System.TimeSpan.MaxValue"/> value.
            </exception>
        </member>
        <member name="T:IdGen.IIdGenerator`1">
            <summary>
            Provides the interface for Id-generators.
            </summary>
            <typeparam name="T">The type for the generated ID's.</typeparam>
        </member>
        <member name="M:IdGen.IIdGenerator`1.CreateId">
            <summary>
            Creates a new Id.
            </summary>
            <returns>Returns an Id.</returns>
        </member>
        <member name="T:IdGen.InvalidSystemClockException">
            <summary>
            The exception that is thrown when a clock going backwards is detected.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:IdGen.InvalidSystemClockException"/> class with a message that describes
            the error and underlying exception.
            </remarks>
            <param name="message">
            The message that describes the exception. The caller of this constructor is required to ensure that this 
            string has been localized for the current system culture.
            </param>
            <param name="innerException">
            The exception that is the cause of the current <see cref="T:IdGen.InvalidSystemClockException"/>. If the
            innerException parameter is not null, the current exception is raised in a catch block that handles the
            inner exception.
            </param>
        </member>
        <member name="M:IdGen.InvalidSystemClockException.#ctor(System.String,System.Exception)">
            <summary>
            The exception that is thrown when a clock going backwards is detected.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:IdGen.InvalidSystemClockException"/> class with a message that describes
            the error and underlying exception.
            </remarks>
            <param name="message">
            The message that describes the exception. The caller of this constructor is required to ensure that this 
            string has been localized for the current system culture.
            </param>
            <param name="innerException">
            The exception that is the cause of the current <see cref="T:IdGen.InvalidSystemClockException"/>. If the
            innerException parameter is not null, the current exception is raised in a catch block that handles the
            inner exception.
            </param>
        </member>
        <member name="M:IdGen.InvalidSystemClockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdGen.InvalidSystemClockException"/> class.
            </summary>
        </member>
        <member name="M:IdGen.InvalidSystemClockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdGen.InvalidSystemClockException"/> class with a message that describes the error.
            </summary>
            <param name="message">
            The message that describes the exception. The caller of this constructor is required to ensure that this 
            string has been localized for the current system culture.
            </param>
        </member>
        <member name="T:IdGen.ITimeSource">
            <summary>
            Provides the interface for timesources that provide time information to <see cref="T:IdGen.IdGenerator"/>s.
            </summary>
        </member>
        <member name="P:IdGen.ITimeSource.Epoch">
            <summary>
            Gets the epoch of the <see cref="T:IdGen.ITimeSource"/>.
            </summary>
        </member>
        <member name="P:IdGen.ITimeSource.TickDuration">
            <summary>
            Returns the duration of a single tick.
            </summary>
            <remarks>
            It's up to the <see cref="T:IdGen.ITimeSource"/> to define what a 'tick' is; it may be nanoseconds, milliseconds,
            seconds or even days or years.
            </remarks>
        </member>
        <member name="M:IdGen.ITimeSource.GetTicks">
            <summary>
            Returns the current number of ticks for the <see cref="T:IdGen.ITimeSource"/>.
            </summary>
            <returns>The current number of ticks to be used by an <see cref="T:IdGen.IdGenerator"/> when creating an Id.</returns>
            <remarks>
            It's up to the <see cref="T:IdGen.ITimeSource"/> to define what a 'tick' is; it may be nanoseconds, milliseconds,
            seconds or even days or years.
            </remarks>
        </member>
        <member name="T:IdGen.SequenceOverflowException">
            <summary>
            The exception that is thrown when a sequence overflows (e.g. too many Id's generated within the same timespan (ms)).
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:IdGen.SequenceOverflowException"/> class with a message that describes
            the error and underlying exception.
            </remarks>
            <param name="message">
            The message that describes the exception. The caller of this constructor is required to ensure that this 
            string has been localized for the current system culture.
            </param>
            <param name="innerException">
            The exception that is the cause of the current <see cref="T:IdGen.SequenceOverflowException"/>. If the
            innerException parameter is not null, the current exception is raised in a catch block that handles the
            inner exception.
            </param>
        </member>
        <member name="M:IdGen.SequenceOverflowException.#ctor(System.String,System.Exception)">
            <summary>
            The exception that is thrown when a sequence overflows (e.g. too many Id's generated within the same timespan (ms)).
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:IdGen.SequenceOverflowException"/> class with a message that describes
            the error and underlying exception.
            </remarks>
            <param name="message">
            The message that describes the exception. The caller of this constructor is required to ensure that this 
            string has been localized for the current system culture.
            </param>
            <param name="innerException">
            The exception that is the cause of the current <see cref="T:IdGen.SequenceOverflowException"/>. If the
            innerException parameter is not null, the current exception is raised in a catch block that handles the
            inner exception.
            </param>
        </member>
        <member name="M:IdGen.SequenceOverflowException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdGen.SequenceOverflowException"/> class.
            </summary>
        </member>
        <member name="M:IdGen.SequenceOverflowException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:IdGen.SequenceOverflowException"/> class with a message that describes the error.
            </summary>
            <param name="message">
            The message that describes the exception. The caller of this constructor is required to ensure that this 
            string has been localized for the current system culture.
            </param>
        </member>
        <member name="T:IdGen.SequenceOverflowStrategy">
            <summary>
            Specifies the strategy to use when a sequence overflow occurs during generation of an ID.
            </summary>
        </member>
        <member name="F:IdGen.SequenceOverflowStrategy.Throw">
            <summary>
            Throw a <see cref="T:IdGen.SequenceOverflowException"/> on sequence overflow.
            </summary>
        </member>
        <member name="F:IdGen.SequenceOverflowStrategy.SpinWait">
            <summary>
            Wait, using a <see cref="F:IdGen.SequenceOverflowStrategy.SpinWait"/>, for the tick te pass before generating a new ID.
            </summary>
        </member>
        <member name="T:IdGen.StopwatchTimeSource">
            <summary>
            Provides time data to an <see cref="T:IdGen.IdGenerator"/>. This timesource uses a <see cref="T:System.Diagnostics.Stopwatch"/> for timekeeping.
            </summary>
        </member>
        <member name="P:IdGen.StopwatchTimeSource.Epoch">
            <summary>
            Gets the epoch of the <see cref="T:IdGen.ITimeSource"/>.
            </summary>
        </member>
        <member name="P:IdGen.StopwatchTimeSource.Elapsed">
            <summary>
            Gets the elapsed time since this <see cref="T:IdGen.ITimeSource"/> was initialized.
            </summary>
        </member>
        <member name="P:IdGen.StopwatchTimeSource.Offset">
            <summary>
            Gets the offset for this <see cref="T:IdGen.ITimeSource"/> which is defined as the difference of it's creationdate
            and it's epoch which is specified in the object's constructor.
            </summary>
        </member>
        <member name="M:IdGen.StopwatchTimeSource.#ctor(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:IdGen.StopwatchTimeSource"/> object.
            </summary>
            <param name="epoch">The epoch to use as an offset from now,</param>
            <param name="tickDuration">The duration of a single tick for this timesource.</param>
        </member>
        <member name="P:IdGen.StopwatchTimeSource.TickDuration">
            <summary>
            Returns the duration of a single tick.
            </summary>
        </member>
        <member name="M:IdGen.StopwatchTimeSource.GetTicks">
            <summary>
            Returns the current number of ticks for the <see cref="T:IdGen.DefaultTimeSource"/>.
            </summary>
            <returns>The current number of ticks to be used by an <see cref="T:IdGen.IdGenerator"/> when creating an Id.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="!:ReadOnlySpan&lt;T&gt;"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type hasandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
